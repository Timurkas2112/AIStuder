from flask import Flask, render_template, request
import markdown

app = Flask(__name__)

# Словарь с содержимым книги
book_content = [
    {'chapter': 1, 'title': 'Введение в Python', 'content': markdown.markdown("""**Введение в программирование и Python**

Программирование - это процесс создания программ, которые могут выполнять различные задачи на компьютере. Программы могут быть простыми, такими как калькулятор, или весьма сложными, такими как операционные системы или компьютерные игры. Чтобы написать программу, необходимо понять, как работает компьютер и как он может выполнять инструкции.

**Что такое программирование?**

Программирование - это процесс создания алгоритмов, которые решают определенные задачи. Алгоритм - это шаг за шагом описанный план действий, который компьютер может выполнить. Алгоритмы могут быть представлены в виде текста, называемого кодом, который компьютер может интерпретировать и выполнять.

Программирование включает в себя несколько этапов:

1. Анализ задачи - определение проблемы, которую нужно решить.
2. Разработка алгоритма - создание шаг за шагом описанного плана действий.
3. Реализация алгоритма - написание кода на языке программирования.
4. Тестирование - проверка программы на ошибки и неправильное функционирование.
5.DEBUG - поиск и исправление ошибок.

** История программирования**

Первые компьютеры были созданы в середине 20-го века, и с тех пор программирование стало важной частью нашей жизни. В 1950-х годах был разработан первый язык программирования - Фортран, который использовался для научных расчетов. В 1960-х годах появились языки программирования, такие как COBOL и LISP, которые использовались для бизнес-приложений и искусственного интеллекта соответственно.

В 1970-х годах был разработан язык программирования C, который стал одним из самых популярных языков программирования. В 1980-х годах появились языки программирования, такие как Pascal и C++, которые использовались для разработки программ для домашних компьютеров.

**Что такое Python?**

Python - это язык программирования высокого уровня, который был разработан в конце 1980-х годов. Он был создан Гuido van Rossum, который хотел создать язык, который был бы простым в использовании и гибким. Python быстро стал популярным языком программирования, особенно среди научных и образовательных учреждений.

Python - это язык с открытым исходным кодом, что означает, что его source code является открытым и доступным для всех. Это позволяет разработчикам по всему миру вносить вклад в развитие языка и создавать новые модули и библиотеки.

**Преимущества Python**

Python имеет несколько преимуществ, которые делают его популярным выбором для многих разработчиков:

* Простота использования - Python имеет простой синтаксис, что делает его легким для изучения.
* Гибкость - Python может быть использован для широкого спектра задач, от научных расчетов до веб-разработки.
*PEED - Python имеет высокую производительность, что делает его подходящим для ресурсоемких задач.
* Community - Python имеет большую и активную community, что означает, что есть много ресурсов для изучения и развития навыков.

**Зачем изучать Python?**

Python - это язык программирования, который используется в многих областях, включая:

* Научные расчеты - Python используется в научных исследованиях для анализа данных и создания моделей.
* Веб-разработка - Python используется для создания веб-сайтов и веб-приложений.
* Машинное обучение - Python используется для создания моделей машинного обучения и искусственного интеллекта.
* Образование - Python используется в образовательных учреждениях для обучения программированию.

Изучение Python может помочь вам:

* Получить новые навыки и знания
* Развивать свою карьеру в области программирования
* Создавать свои собственные программы и приложения
* Улучшить свои навыки анализа данных и моделирования

В следующих главах мы будем estudar Python более подробно, начиная с основ синтаксиса и заканчивая созданием сложных программ.
""")},
     {'chapter': 2, 'title': 'Установка и настройка среды разработки'},
     {'chapter': 3, 'title': 'Базовые типы данных в Python'},
     {'chapter': 4, 'title': 'Переменные, операторы присваивания и выражения'},
     {'chapter': 5, 'title': 'Управляющие strukтуры: условные операторы'},
     {'chapter': 6, 'title': 'Управляющие структуры: циклы'},
     {'chapter': 7, 'title': 'Функции в Python'},
     {'chapter': 8, 'title': 'Работа с массивами и списками'},
     {'chapter': 9, 'title': 'Работа со словарями и множествами'},
     {'chapter': 10,
      'title': 'Объектно-ориентированное программирование в Python'},
     {'chapter': 11, 'title': 'Работа с файлами в Python'},
     {'chapter': 12, 'title': 'Исключения и обработка ошибок'},
     {'chapter': 13, 'title': 'Модули и библиотеки в Python'},
     {'chapter': 14, 'title': '-Regularne выразения в Python'}
]

quiz_data = {
    'title': 'Работа со строками и списками в Python',
    'questions': [
        {
            'id': 1,
            'question_text': 'Какой оператор используется для конкатенации (объединения) строк в Python?',
            'options': ['+', '-', '*', '/'],
            'correct_answer': '+',
            'explanation': 'Оператор "+" используется для сложения (конкатенации) строк.'
        },
        {
            'id': 2,
            'question_text': 'Что произойдет, если применить оператор "*" к строке и числу?',
            'options': [
                'Возникнет ошибка',
                'Строка будет повторена указанное число раз',
                'Строка будет умножена на число',
                'Число будет добавлено к строке'
            ],
            'correct_answer': 'Строка будет повторена указанное число раз',
            'explanation': 'Оператор "*" повторяет строку указанное количество раз.'
        },
        {
            'id': 3,
            'question_text': 'Как получить доступ к третьему символу строки "Python"?',
            'options': ['string[3]', 'string[2]', 'string[-3]', 'string[4]'],
            'correct_answer': 'string[2]',
            'explanation': 'Индексация в Python начинается с 0.  Третий символ имеет индекс 2.'
        },
        {
            'id': 4,
            'question_text': 'Какой метод используется для преобразования строки в верхний регистр?',
            'options': ['lower()', 'upper()', 'capitalize()', 'title()'],
            'correct_answer': 'upper()',
            'explanation': 'Метод upper() преобразует строку в верхний регистр.'
        },
        {
            'id': 5,
            'question_text': 'Что возвращает метод `split()` для строки "Это строка с пробелами"?',
            'options': [
                '"Это строка с пробелами"',
                '["Это", "строка", "с", "пробелами"]',
                '["Это строка с пробелами"]',
                'Ошибка'
            ],
            'correct_answer': '["Это", "строка", "с", "пробелами"]',
            'explanation': 'Метод split() разделяет строку на список подстрок по разделителю (пробелу по умолчанию).'
        },
        {
            'id': 6,
            'question_text': 'Как добавить элемент в конец списка?',
            'options': ['list.append(element)', 'list.insert(0, element)', 'list.extend(element)', 'list.add(element)'],
            'correct_answer': 'list.append(element)',
            'explanation': 'Метод append() добавляет элемент в конец списка.'
        },
        {
            'id': 7,
            'question_text': 'Какой метод удаляет и возвращает последний элемент списка?',
            'options': ['list.remove()', 'list.pop()', 'list.del()', 'list.delete()'],
            'correct_answer': 'list.pop()',
            'explanation': 'Метод pop() удаляет и возвращает последний элемент списка (или элемент по указанному индексу).'
        },
        {
            'id': 8,
            'question_text': 'Являются ли списки в Python изменяемыми?',
            'options': ['Да', 'Нет'],
            'correct_answer': 'Да',
            'explanation': 'Списки в Python являются изменяемыми, в отличие от строк.'
        },
        {
            'id': 9,
            'question_text': 'Что такое срезы (slices) в Python?',
            'options': [
                'Способ удаления элементов из списка',
                'Способ извлечения подпоследовательности из строки или списка',
                'Способ сортировки списка',
                'Способ объединения списков'
            ],
            'correct_answer': 'Способ извлечения подпоследовательности из строки или списка',
            'explanation': 'Срезы позволяют извлечь часть строки или списка.'
        },
        {
            'id': 10,
            'question_text': 'Можно ли в одном списке хранить элементы разных типов данных?',
            'options': ['Да', 'Нет'],
            'correct_answer': 'Да',
            'explanation': 'Списки в Python могут содержать элементы различных типов данных.'
        }
    ]
}




@app.route('/')
def index():
    return render_template("content.html", book_content=book_content)

@app.route('/login')
def login():
    return render_template("login.html")


@app.route('/quiz')
def quiz():
    return render_template("quiz.html", book_content=book_content, quiz_title=quiz_data['title'], questions=quiz_data['questions'])


@app.route('/answers', methods=['POST'])
def answers():
    user_answers = {key: value for key, value in request.form.items()}
    score, total_questions = calculate_score(user_answers)
    return render_template('result.html', book_content=book_content, title='Quiz Result', score=score, total_questions=total_questions)


def calculate_score(user_answers):
    score = 0
    total_questions = len(quiz_data['questions'])

    for question in quiz_data['questions']:
        question_id = question['id']
        user_answer = user_answers.get(str(question_id))  # Convert question_id to string
        if user_answer and user_answer == question['correct_answer']:
            score += 1

    return score, total_questions



if __name__ == "__main__":
    app.run(debug=True)